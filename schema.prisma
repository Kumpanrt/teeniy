// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User{
  user_id             Int @default(autoincrement())
  user_username       String  @unique
  user_password       String  @unique
  salt                String  @unique
  is_active           Boolean   @default(false)
  user_role           Enum
  created_at          DateTime  @default(now())
  updated_at          DateTime? @updatedAt
  personal_id         PersonalInformation?
  profile_id          Profile?

  @@map("Users")

}

model Profile{
  profile_id                Int @default(autoincrement())
  profile_name_lastname     String
  profile_email             String
  profile_phone             String
  profile_gender            Boolean @default(false)
  profile_cashback_total    String
  profile_like              Json?
  created_at                DateTime @default(now())
  updated_at                DateTime? @updatedAt
  ref_user_id               Int 
  user                      User  @relation(fields: [ref_user_id], references: [user_id])
  cashback_id               CashBack?
  hoteltran_id              HotelTransaction?
  review_id                 Review?
  @@map("Profiles")
}

model PersonalInformation{
  personal_id               Int @default(autoincrement())
  personal_name_lastname    String
  personal_birthday         String
  personal_email            String
  personal_phone            String
  personal_address          String
  ref_user_id                Int
  user                      User  @relation(fields: [ref_user_id], references: [user_id])
  hotelinfo                 HotelInformation[]
}

model HotelInformation{
  hotelinfo_id              Int @default(autoincrement())
  hotelinfo_name            String
  hotelinfo_address         String
  hotelinfo_province        String
  hotelinfo_district        String
  hotelinfo_location        String
  hotelinfo_image           String
  ref_personal_id           Int
  personalinformation       PersonalInformation @relation(fields: [ref_personal_id], references: [personal_id])
  checkinfo_id              CheckinInformation[]
  province_id               Province[]
  district_id               District[]

}

model CheckinInformation{
  checkinfo_id                    Int @default(autoincrement())
  checkinfo_shot_check_in         String
  checkinfo_shot_last_check_in    String
  checkinfo_over_check_in         String
  checkinfo_over_check_out        String
  checkinfo_detail                String
  ref_hotelinfo_id                Int
  hoteliinformation               HotelInformation @relation(fields: [ref_hotelinfo_id], references: [hotelinfo_id])
  hotelbooking_id                 HotelTransaction[]

}

model Province{
  province_id       Int @default(autoincrement())
  province_name     String
  ref_profile_id    Int
  profile           Profile @relation(fields:[ref_profile_id], references:[profile_id])
  ref_hotelinfo_id  Int
  HotelInformation  HotelInformation @relation(fields:[ref_hotelinfo_id], references:[hotelinfo_id])
  district_id       District[]
  
  @@map("Provinces")

}

model District{
  district_id       Int @default(autoincrement()) 
  district_name     String
  ref_province_id   Int
  province          Province @relation(fields:[ref_province_id], references:[province_id])
  ref_hotelinfo_id  Int
  HotelInformation  HotelInformation @relation(fields:[ref_hotelinfo_id], references:[hotelinfo_id])

  @@map("Districts")
}

model HotelTransaction{
  hoteltran_id             Int @default(autoincrement())
  hoteltran_members        String
  hoteltran_type           Boolean @default(false)
  ref_profile_id           Int
  profile                  Profile @relation(fields:[ref_profile_id], references:[profile_id])
  ref_checkinfo_id         Int
  checkininformation       CheckinInformation  @relation(fields:[ref_checkinfo_id], references:[checkinfo_id])
  review_id                Review?

  @@map("HotelTransactions")

}

model Review{
  review_id                     Int @default(autoincrement())
  review_score                  String?
  created_at                    DateTime  @default(now())
  updated_at                    DateTime? @updatedAt
  ref_profile_id                Int
  profile                       Profile @relation(fields:[ref_profile_id], references:[profile_id])
  ref_hoteltran_id              Int
  hoteltransaction              HotelTransaction @relation(fields: [ref_hoteltran_id], references:[hoteltran_id])
  hotelrating                   HotelRating[]
  
  @@map("Reviews")


}
model CashBack{
  cashback_id   Int @default(autoincrement())
  cashback_text String
  cashback_money_gift Int
  ref_profile_id   Int
  profile           Profile @relation(fields: [ref_profile_id], references:[profile_id])
  ref_hoteltran_id  Int
  hoteltran         HotelTransaction @relation(fields: [ref_hoteltran_id], references:[hoteltran_id])

  @@map("CashBacks")
}

model RoomInformation{
  roominfo_id       Int  @default(autoincrement())
  roominfo_name     String
  roominfo_size     Int
  roominfo_type_bed String
  roominfo_limit    Int
  roominfo_amount   Int
  roominfo_price    Int
  roominfo_checkinfo_shot_check_in         String
  roominfo_checkinfo_shot_last_check_in    String
  roominfo_checkinfo_over_check_in         String
  roominfo_checkinfo_over_check_out        String
  ref_checkinfo_id      Int
  checkinformation      CheckinInformation @relation(fields: [ref_checkinfo_id], references: [checkinfo_id])
  facilitise            Facilitise[]
}

model Facilitise{
  facilitise_id     Int @default(autoincrement())
  facilitise_name   String
  rooinformation    RoomInformation[]
}

model RoomInformation_has_Facilitise{
  ref_roominfo_id   Int
  roominformation   RoomInformation @relation(fields: [ref_roominfo_id], references: [roominfo_id])
  ref_facilitise_id Int
  facilitise        Facilitise @relation(fields: [ref_facilitise_id], references: [facilitise_id])
}

model HotelRating{
  rate_id           Int @default(autoincrement())
  rate_score        Int
  rate_text         String?
  ref_review_id     Int
  review            Review @relation(fields: [ref_review_id], references: [review_id])
  ref_hotel_id      Int
  hotelimformation  HotelInformation @relation(fields: [ref_hotel_id], references: [hotelinfo_id])

  @@map("HotelRatings")

}




